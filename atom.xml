<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://oneraghavan.github.io/atom.xml" rel="self"/>
  <link href="http://oneraghavan.github.io/"/>
  <updated>2013-08-16T16:57:22+05:30</updated>
  <id>http://oneraghavan.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu for Ruby on Rails Development 2]]></title>
    <link href="http://oneraghavan.github.io/blog/2013/06/28/ubuntu-for-ruby-on-rails-development-2/"/>
    <updated>2013-06-28T16:54:00+05:30</updated>
    <id>http://oneraghavan.github.io/blog/2013/06/28/ubuntu-for-ruby-on-rails-development-2</id>
    <content type="html"><![CDATA[<p>This is the second part of building Ruby on Rails development on Ubuntu. This part
will discuse about database, deployment method, and text editor.</p>

<!-- more -->


<h2>Postgresql</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu for Ruby on Rails Development]]></title>
    <link href="http://oneraghavan.github.io/blog/2013/06/14/ubuntu-for-rails-development/"/>
    <updated>2013-06-14T06:55:00+05:30</updated>
    <id>http://oneraghavan.github.io/blog/2013/06/14/ubuntu-for-rails-development</id>
    <content type="html"><![CDATA[<p>Setting up Ubuntu for <a href="http://rubyonrails.org">Ruby on Rails</a> development is very easy. Even it&rsquo;s not as easy
as installing Rails in Windows, developing Rails in Ubuntu is way better than in
Windows. I will show you how to build a good environment for Rails development in
Ubuntu 13.04 (and work on lower version to).</p>

<!-- more -->


<h2>Installing Ruby Version Manager (RVM)</h2>

<p>Before installing <a href="http://rvm.io">RVM</a>, Ruby, RubyGems, Rails, etc we need install some required packages
including git and nodejs.</p>

<pre><code>$ sudo apt-get install build-essential curl git git-core nodejs
</code></pre>

<p>RVM is a command-line tool which allows you to easily install, manage, and work
with multiple ruby environments from interpreters to sets of gems. Install RVM
from command-line:</p>

<pre><code>$ curl -L https://get.rvm.io | bash
</code></pre>

<p>To get RVM work flawlessly we need to add a line to <code>.bashrc</code> on our home directory.</p>

<pre><code>$ echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; source "$HOME/.rvm/scripts/rvm"' &gt;&gt; ~/.bashrc
</code></pre>

<p>That line will load RVM into a shell session as a function. Check our RVM installation
from command-line:</p>

<pre><code>$ type rvm | head -1
</code></pre>

<p>If the output is <code>rvm is a function</code> we have a very functionally RVM. Installing Ruby need several
additional packages, we can use RVM to automatically install those packages:</p>

<pre><code>$ rvm requirements
</code></pre>

<p>After installing additional packages we can start install Ruby using RVM.</p>

<p><em>Notes: This RVM installation method is for single user only, to install for multi user
run those commands from root.</em></p>

<h2>Installing Ruby on Rails</h2>

<p>We use RVM to install Ruby binary, with RVM we can install many version of Ruby and simply manage it. To see
list of Ruby version:</p>

<pre><code>$ rvm list known
</code></pre>

<p>To install Ruby 1.9.3-p429 or Ruby 2.0.0-p0</p>

<pre><code>$ rvm install 1.9.3
$ rvm install 2.0.0p0
</code></pre>

<p>RVM will automatically install Ruby and RubyGems. If there are no Ruby binaries available, RVM will build it for source.
This may take a while depending on our CPU. Set a Ruby version to use it as default Ruby:</p>

<pre><code>$ rvm use 1.9.3 --default
</code></pre>

<p>After we have a working Ruby binary, we can installing Rails by using:</p>

<pre><code>$ gem install rails --no-rdoc --no-ri
</code></pre>

<p>If you do not want install rdoc and ri documentation every installing a gem, add this line to <code>.gemrc</code> on home directory:</p>

<pre><code>$ echo 'gem: --no-rdoc --no-ri' &gt;&gt; ~/.gemrc
</code></pre>

<p>You may have to create <code>.gemrc</code> manually.</p>

<h2>Git Configuration</h2>

<p>Now that you have Git installed, it&rsquo;s time to configure your settings.</p>

<h3>Username and Email</h3>

<p>First you need to tell git your name, so that it can properly label the commits you make.</p>

<pre><code>$ git config --global user.name "Your Name Here"
</code></pre>

<p>Git saves your email address into the commits you make.</p>

<pre><code>$ git config --global user.email "your_email@example.com"
</code></pre>

<p>After setting up the basic environment you are ready to create Rails project. The advance environment (database, deployment, etc) are in the second part of this post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress on OpenShift]]></title>
    <link href="http://oneraghavan.github.io/blog/2013/06/14/octopress-on-openshift/"/>
    <updated>2013-06-14T06:55:00+05:30</updated>
    <id>http://oneraghavan.github.io/blog/2013/06/14/octopress-on-openshift</id>
    <content type="html"><![CDATA[<p>Deploying <a href="http://octopress.org/">Octopress</a> or <a href="http://jekyllrb.com/">Jekyll</a> based website on <a href="http://pages.github.com/">GitHub Pages</a>
is really easy, just create a repo named <code>username.github.io</code> or
create gh-pages branch in the project repository, or we can deploy it to <a href="https://www.heroku.com/">Heroku</a>. A website generated from
Jekyll is a real static website. What you see is really what you see. The dynamic content laying on embedding Javascript in the html pages.</p>

<p>With <a href="https://www.openshift.com/">OpenShift</a> we can host Octopress based website like on GitHub pages. We just host the static content and managing it with git. I found two methods to do this. First, just using Webrick server. Second, install nginx on our hosting platform.</p>

<!-- more -->


<h2>The Easy Way</h2>

<p>The easy way is the first method. Create an application with <em>Do It Yourself</em> catridge, we can do it from Web console or with command-line:</p>

<pre><code>$ rhc app create myapp diy-0.1
</code></pre>

<p>Clone our application using git. And create a folder named public. Open <code>diy/testrubyserver.rb</code> using text editor, and edit some lines.</p>

<figure class='code'><figcaption><span>testrubyserver.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;webrick&#39;</span>
</span><span class='line'><span class="kp">include</span> <span class="no">WEBrick</span>
</span><span class='line'>
</span><span class='line'><span class="n">dir</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;OPENSHIFT_REPO_DIR&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="ss">:Port</span> <span class="o">=&gt;</span> <span class="mi">8080</span><span class="p">)</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="ss">:BindAddress</span> <span class="o">=&gt;</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="ss">:DocumentRoot</span> <span class="o">=&gt;</span> <span class="n">dir</span> <span class="o">+</span> <span class="s1">&#39;public&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">server</span> <span class="o">=</span> <span class="no">HTTPServer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
</span><span class='line'><span class="o">[</span><span class="s1">&#39;INT&#39;</span><span class="p">,</span> <span class="s1">&#39;TERM&#39;</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">signal</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">trap</span><span class="p">(</span><span class="n">signal</span><span class="p">)</span> <span class="p">{</span><span class="n">server</span><span class="o">.</span><span class="n">shutdown</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span><span class="o">.</span><span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can manually copy our generated website to public folder and push it. Or we can modify <code>Rakefile</code> to automatically doing it for us. I made some changes in Octopress default <code>Rakefile</code> and posted on <a href="https://gist.github.com/rezajatnika/5857236">gist</a>. Move your app directory to Octopress root directory. Use <code>rake deploy</code> to automatically generate and push our website. Change deploy folder to your own.</p>

<h2>The Less Easy Way</h2>

<p>The second method is using nginx as a web server to host our generated website. Of course we have to install nginx first. To do this, log in into your
application using ssh. Use <code>rhc show -a myapp</code> to see ssh address of your application. Or you can use some repo templates for automatically install nginx
on OpenShift.</p>

<pre><code>$ ssh &lt;random-string&gt;@myapp-mydomain.rhcloud.com
</code></pre>

<p>Now we can start the nginx installation. Navigate to the tmp dir and download the nginx source.</p>

<pre><code>$ cd $OPENSHIFT_TMP_DIR
$ wget http://nginx.org/download/nginx-1.4.1.tar.gz
$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.31.tar.bz2
$ tar jxf pcre-8.31.tar.bz2
$ tar zxf nginx-1.4.1.tar.gz
$ cd nginx-1.4.1
$ ./configure --prefix=$OPENSHIFT_DATA_DIR --with-pcre=$OPENSHIFT_TMP_DIR/pcre-8.31
</code></pre>

<p>Now we can compile and install nginx.</p>

<pre><code>$ make install
</code></pre>

<p>See this page to read more about OpenShift environment variables. OpenShift only allow an internal IP address and port for your application which are available through <code>$OPENSHIFT_DIY_IP</code> and <code>$OPENSHIFT_DIY_PORT</code> enviroment variables. And these values may change. We need to do a little trick here to bind the internal IP address and port in nginx configuration dynamically. I preffer using the <code>erb</code> command. Rename the default configuration file.</p>

<pre><code>$ mv $OPENSHIFT_DATA_DIR/conf/nginx.conf $OPENSHIFT_DATA_DIR/conf/nginx.conf.def
</code></pre>

<p>We will modify create the configuration file using when the start action hook is called. Now browse to our app directory, and open
<code>.openshift/action_hooks/start</code> using text editor. Add these lines below:</p>

<figure class='code'><figcaption><span>start </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># The logic to start up your application should be put in this</span>
</span><span class='line'><span class="c"># script.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">TEMPLATES_DIR</span><span class="o">=</span><span class="k">${</span><span class="nv">OPENSHIFT_REPO_DIR</span><span class="k">}</span>/.openshift/templates
</span><span class='line'><span class="nv">INSTALL_DIR</span><span class="o">=</span><span class="k">${</span><span class="nv">OPENSHIFT_HOMEDIR</span><span class="k">}</span>/app-root/data
</span><span class='line'>
</span><span class='line'>erb <span class="k">${</span><span class="nv">TEMPLATES_DIR</span><span class="k">}</span>/nginx.conf.erb &gt; <span class="k">${</span><span class="nv">INSTALL_DIR</span><span class="k">}</span>/conf/nginx.conf
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Starting nginx...&quot;</span>
</span><span class='line'>nohup <span class="k">${</span><span class="nv">INSTALL_DIR</span><span class="k">}</span>/sbin/nginx &gt; <span class="k">${</span><span class="nv">INSTALL_DIR</span><span class="k">}</span>/logs/server.log 2&gt;&amp;1 &amp;
</span></code></pre></td></tr></table></div></figure>


<p>Modify <code>.openshift/action_hooks/stop</code> so nginx also stop everytime we make a push.</p>

<figure class='code'><figcaption><span>stop </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c"># The logic to stop your application should be put in this script.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">INSTALL_DIR</span><span class="o">=</span><span class="k">${</span><span class="nv">OPENSHIFT_HOMEDIR</span><span class="k">}</span>/app-root/data
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Stopping nginx...&quot;</span>
</span><span class='line'><span class="nb">kill</span> -QUIT <span class="sb">`</span>cat <span class="k">${</span><span class="nv">INSTALL_DIR</span><span class="k">}</span>/logs/nginx.pid<span class="sb">`</span>
</span><span class='line'><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure>


<p>Create a folder named templates on <code>.openshift</code> folder. And create file named <code>nginx.conf.erb</code> in templates folder.
Content of this file is just default nginx configuration with some modification on <code>listen</code> and <code>location</code> directive.</p>

<figure class='code'><figcaption><span>nginx.conf.erb</span><a href='https://gist.github.com/rezajatnika/5857259'>View on Gist </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">...</span>
</span><span class='line'>
</span><span class='line'><span class="x">server {</span>
</span><span class='line'><span class="x">        listen       </span><span class="cp">&lt;%=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;OPENSHIFT_DIY_IP&#39;</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">:</span><span class="cp">&lt;%=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;OPENSHIFT_DIY_PORT&#39;</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">;</span>
</span><span class='line'><span class="x">        server_name  localhost;</span>
</span><span class='line'><span class="x">        port_in_redirect off;</span>
</span><span class='line'>
</span><span class='line'><span class="x">...</span>
</span><span class='line'>
</span><span class='line'><span class="x">location / {</span>
</span><span class='line'><span class="x">            root   </span><span class="cp">&lt;%=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;OPENSHIFT_REPO_DIR&#39;</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/public;</span>
</span><span class='line'><span class="x">            index  index.html index.htm;</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'>
</span><span class='line'><span class="x">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it. Just run <code>rake deploy</code> using the <code>Rakefile</code> I provided before. Having a diy
cartidge on the OpenShift is like having a virtual private server, although we don&rsquo;t actually have
full access. A small gear in OpenShift provided with 512 MB memory and 1 GB storage. More than enough
for personal blog or website.</p>
]]></content>
  </entry>
  
</feed>
